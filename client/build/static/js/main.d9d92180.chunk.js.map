{"version":3,"sources":["utils/auth.js","utils/mutations.js","components/LoginForm/index.js","components/SignupForm/index.js","components/Navbar/index.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","ADD_USER","gql","LOGIN_USER","SAVE_BOOK","REMOVE_BOOK","LoginForm","useMutation","login","error","useState","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","console","username","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","SignupForm","addUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","loggedIn","onClick","logout","Modal","size","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","saveBook","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","fetch","response","ok","Error","json","items","bookData","map","book","authors","volumeInfo","title","description","image","imageLinks","thumbnail","link","previewLink","handleSaveBook","bookToSave","find","input","log","Jumbotron","Row","Col","xs","md","e","CardColumns","Card","key","border","Img","src","alt","Text","href","some","GET_ME","SavedBooks","userData","setUserData","userDataLength","Object","keys","removeBook","useQuery","loading","user","me","getUserData","handleDeleteBook","savedBooks","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9d92180.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n    // get user data\r\n    getProfile() {\r\n        return decode(this.getToken());\r\n    }\r\n\r\n    // check if user's logged in\r\n    loggedIn() {\r\n        // Checks if there is a saved token and it's still valid\r\n        const token = this.getToken();\r\n        return !!token && !this.isTokenExpired(token); // handwaiving here\r\n    }\r\n\r\n    // check if token is expired\r\n    isTokenExpired(token) {\r\n        try {\r\n            const decoded = decode(token);\r\n            if (decoded.exp < Date.now() / 1000) {\r\n                return true;\r\n            } else return false;\r\n        } catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    // retrieve token from localStorage\r\n    getToken() {\r\n        // Retrieves the user token from localStorage\r\n        return localStorage.getItem('id_token');\r\n    }\r\n\r\n    // set token to localStorage and reload page to homepage\r\n    login(idToken) {\r\n        // Saves user token to localStorage\r\n        localStorage.setItem('id_token', idToken);\r\n        window.location.assign('/');\r\n    }\r\n\r\n    // clear token from localStorage and force logout with reload\r\n    logout() {\r\n        // Clear user token and profile data from localStorage\r\n        localStorage.removeItem('id_token');\r\n        // this will reload the page and reset the state of the application\r\n        window.location.assign('/');\r\n    }\r\n}\r\n\r\nexport default new AuthService();","import gql from 'graphql-tag';\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $email: String!, $password: String!) {\r\n        addUser(username: $username, email: $email, password: $password) {\r\n        token\r\n            user {\r\n                _id\r\n                username\r\n                email\r\n                bookCount\r\n                savedBooks {\r\n                    bookId\r\n                    title\r\n                    description\r\n                    authors\r\n                    image\r\n                    link\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n        login(email: $email, password: $password) {\r\n        token\r\n            user {\r\n                _id\r\n                username\r\n                email\r\n                bookCount\r\n                savedBooks {\r\n                    bookId\r\n                    title\r\n                    description\r\n                    authors\r\n                    link\r\n                    image\r\n         }\r\n       }\r\n     }\r\n   }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n    mutation saveBook($input: bookInput!) {\r\n        saveBook(input: $input) {\r\n            _id\r\n            username\r\n            email\r\n            savedBooks {\r\n                bookId\r\n                authors\r\n                image\r\n                description\r\n                title\r\n                link\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBook($bookId: String!) {\r\n        removeBook(bookId: $bookId) {\r\n            _id\r\n            username\r\n            email\r\n            bookCount\r\n            savedBooks {\r\n                bookId\r\n                authors\r\n                image\r\n                description\r\n                title\r\n                link\r\n            }\r\n        }\r\n    }\r\n`;","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport Auth from '../../utils/auth';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { LOGIN_USER } from '../../utils/mutations';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst LoginForm = () => {\r\n    const [login, { error }] = useMutation(LOGIN_USER);\r\n    const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n    const [validated] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setUserFormData({\r\n            ...userFormData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleFormSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        // check if form has everything (as per react-bootstrap docs)\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            const { data } = await login({\r\n                variables: { ...userFormData }\r\n            });\r\n            Auth.login(data.login.token);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setShowAlert(true);\r\n        }\r\n\r\n        setUserFormData({\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n                    Something went wrong with your login credentials!\r\n        </Alert>\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='email'>Email</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Your email'\r\n                        name='email'\r\n                        onChange={handleInputChange}\r\n                        value={userFormData.email}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='password'>Password</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='Your password'\r\n                        name='password'\r\n                        onChange={handleInputChange}\r\n                        value={userFormData.password}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Button\r\n                    disabled={!(userFormData.email && userFormData.password)}\r\n                    type='submit'\r\n                    variant='success'>\r\n                    Login\r\n        </Button>\r\n                {error && <div>Login failed</div>}\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginForm;","import React, { useState } from 'react';\r\nimport Auth from '../../utils/auth';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { ADD_USER } from '../../utils/mutations';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst SignupForm = () => {\r\n    const [addUser, { error }] = useMutation(ADD_USER);\r\n    // set initial form state\r\n    const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n    // set state for form validation\r\n    const [validated] = useState(false);\r\n    // set state for alert\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setUserFormData({ ...userFormData, [name]: value });\r\n    };\r\n\r\n    const handleFormSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        // check if form has everything (as per react-bootstrap docs)\r\n        // const form = event.currentTarget;\r\n        // if (form.checkValidity() === false) {\r\n        //   event.preventDefault();\r\n        //   event.stopPropagation();\r\n        // }\r\n\r\n        try {\r\n            const { data } = await addUser({\r\n                variables: { ...userFormData }\r\n            });\r\n\r\n            Auth.login(data.addUser.token);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setShowAlert(true);\r\n        }\r\n\r\n        setUserFormData({\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* This is needed for the validation functionality above */}\r\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n                {/* show alert if server response is bad */}\r\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n                    Something went wrong with your signup!\r\n        </Alert>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='username'>Username</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Your username'\r\n                        name='username'\r\n                        onChange={handleInputChange}\r\n                        value={userFormData.username}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='email'>Email</Form.Label>\r\n                    <Form.Control\r\n                        type='email'\r\n                        placeholder='Your email address'\r\n                        name='email'\r\n                        onChange={handleInputChange}\r\n                        value={userFormData.email}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label htmlFor='password'>Password</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='Your password'\r\n                        name='password'\r\n                        onChange={handleInputChange}\r\n                        value={userFormData.password}\r\n                        required\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Button\r\n                    disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n                    type='submit'\r\n                    variant='success'>\r\n                    Sign-Up\r\n        </Button>\r\n                {error && <div>Sign up failed</div>}\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignupForm;","import React, { useState } from 'react';\r\nimport Auth from '../../utils/auth';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport LoginForm from '../LoginForm';\r\nimport SignUpForm from '../SignupForm';\r\n\r\nconst AppNavbar = () => {\r\n    // set modal display state\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <Navbar bg='dark' variant='dark' expand='lg'>\r\n                <Container fluid>\r\n                    <Navbar.Brand as={Link} to='/'>\r\n                        Google Books Search\r\n          </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls='navbar' />\r\n                    <Navbar.Collapse id='navbar'>\r\n                        <Nav className='ml-auto'>\r\n                            <Nav.Link as={Link} to='/'>\r\n                                Search For Books\r\n              </Nav.Link>\r\n                            {/* if user is logged in show saved books and logout */}\r\n                            {Auth.loggedIn() ? (\r\n                                <>\r\n                                    <Nav.Link as={Link} to='/saved'>\r\n                                        See Your Books\r\n                  </Nav.Link>\r\n                                    <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                                </>\r\n                            ) : (\r\n                                    <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n                                )}\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n            {/* set modal data up */}\r\n            <Modal\r\n                size='lg'\r\n                show={showModal}\r\n                onHide={() => setShowModal(false)}\r\n                aria-labelledby='signup-modal'>\r\n                {/* tab container to do either signup or login component */}\r\n                <Tab.Container defaultActiveKey='login'>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id='signup-modal'>\r\n                            <Nav variant='pills'>\r\n                                <Nav.Item>\r\n                                    <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                                </Nav.Item>\r\n                                <Nav.Item>\r\n                                    <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                                </Nav.Item>\r\n                            </Nav>\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Tab.Content>\r\n                            <Tab.Pane eventKey='login'>\r\n                                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n                            </Tab.Pane>\r\n                            <Tab.Pane eventKey='signup'>\r\n                                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n                            </Tab.Pane>\r\n                        </Tab.Content>\r\n                    </Modal.Body>\r\n                </Tab.Container>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AppNavbar;","export const getSavedBookIds = () => {\r\n    const savedBookIds = localStorage.getItem('saved_books')\r\n        ? JSON.parse(localStorage.getItem('saved_books'))\r\n        : [];\r\n\r\n    return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n    if (bookIdArr.length) {\r\n        localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n    } else {\r\n        localStorage.removeItem('saved_books');\r\n    }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n    const savedBookIds = localStorage.getItem('saved_books')\r\n        ? JSON.parse(localStorage.getItem('saved_books'))\r\n        : null;\r\n\r\n    if (!savedBookIds) {\r\n        return false;\r\n    }\r\n\r\n    const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n    localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n    return true;\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst SearchBooks = () => {\r\n    const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n    // create state for holding returned google api data\r\n    const [searchedBooks, setSearchedBooks] = useState([]);\r\n    // create state for holding our search field data\r\n    const [searchInput, setSearchInput] = useState('');\r\n\r\n    // create state to hold saved bookId values\r\n    const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n    // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n    // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n    useEffect(() => {\r\n        return () => saveBookIds(savedBookIds);\r\n    });\r\n\r\n    // create method to search for books and set state on form submit\r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!searchInput) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const response = await searchGoogleBooks(searchInput);\r\n\r\n            if (!response.ok) {\r\n                throw new Error('something went wrong!');\r\n            }\r\n\r\n            const { items } = await response.json();\r\n\r\n            const bookData = items.map((book) => ({\r\n                bookId: book.id,\r\n                authors: book.volumeInfo.authors || ['No author to display'],\r\n                title: book.volumeInfo.title,\r\n                description: book.volumeInfo.description,\r\n                image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n                link: book.volumeInfo.previewLink\r\n            }));\r\n\r\n            setSearchedBooks(bookData);\r\n            setSearchInput('');\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    // create function to handle saving a book to our database\r\n    const handleSaveBook = async (bookId) => {\r\n        // find the book in `searchedBooks` state by the matching id\r\n        const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n        // get token\r\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n        if (!token) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const { data } = await saveBook({\r\n                variables: { input: bookToSave }\r\n            });\r\n\r\n            if (error) {\r\n                throw new Error('something went wrong!');\r\n            }\r\n            console.log(data);\r\n\r\n            // if book successfully saves to user's account, save book id to state\r\n            setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Jumbotron fluid className='text-light bg-dark'>\r\n                <Container>\r\n                    <h1>Search for Books!</h1>\r\n                    <Form onSubmit={handleFormSubmit}>\r\n                        <Form.Row>\r\n                            <Col xs={12} md={8}>\r\n                                <Form.Control\r\n                                    name='searchInput'\r\n                                    value={searchInput}\r\n                                    onChange={(e) => setSearchInput(e.target.value)}\r\n                                    type='text'\r\n                                    size='lg'\r\n                                    placeholder='Search for a book'\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={4}>\r\n                                <Button type='submit' variant='success' size='lg'>\r\n                                    Submit Search\r\n                </Button>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Container>\r\n            </Jumbotron>\r\n\r\n            <Container>\r\n                <h2>\r\n                    {searchedBooks.length\r\n                        ? `Viewing ${searchedBooks.length} results:`\r\n                        : 'Search for a book to begin'}\r\n                </h2>\r\n                <CardColumns>\r\n                    {searchedBooks.map((book) => {\r\n                        return (\r\n                            <Card key={book.bookId} border='dark'>\r\n                                {book.image ? (\r\n                                    <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                                ) : null}\r\n                                <Card.Body>\r\n                                    <Card.Title>{book.title}</Card.Title>\r\n                                    <p className='small'>Authors: {book.authors}</p>\r\n                                    <Card.Text>{book.description}</Card.Text>\r\n                                    <a href={book.link} target='_blank'>View on Google Books</a>\r\n                                    <p></p>\r\n                                    {Auth.loggedIn() && (\r\n                                        <Button\r\n                                            disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                                            className='btn-block btn-info'\r\n                                            onClick={() => handleSaveBook(book.bookId)}>\r\n                                            {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                                                ? 'This book has already been saved!'\r\n                                                : 'Save this Book!'}\r\n                                        </Button>\r\n                                    )}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        );\r\n                    })}\r\n                </CardColumns>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchBooks;","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n    return fetch('/api/users/me', {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n    return fetch('/api/users', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n    });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n    return fetch('/api/users/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n    });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n    return fetch('/api/users', {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(bookData),\r\n    });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n    return fetch(`/api/users/books/${bookId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n    return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};","import gql from 'graphql-tag';\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        description\r\n        title\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useEffect, useState } from 'react';\r\nimport Auth from '../utils/auth';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\nimport { GET_ME } from '../utils/queries';\r\n\r\nconst SavedBooks = () => {\r\n    const [userData, setUserData] = useState({});\r\n    // use this to determine if `useEffect()` hook needs to run again\r\n    const userDataLength = Object.keys(userData).length;\r\n\r\n    const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n\r\n    const { loading, data } = useQuery(GET_ME);\r\n    const user = data?.me || {};\r\n\r\n    useEffect(() => {\r\n        const getUserData = async () => {\r\n            try {\r\n                const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n                if (!token) {\r\n                    return false;\r\n                }\r\n\r\n                const response = await user(token);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('something went wrong!');\r\n                }\r\n\r\n                const user = await response.json();\r\n                setUserData(user);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        };\r\n\r\n        getUserData();\r\n    }, [userDataLength]);\r\n\r\n    const handleDeleteBook = async (bookId) => {\r\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n        if (!token) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const { data } = await removeBook({\r\n                variables: { bookId }\r\n            });\r\n\r\n            if (error) {\r\n                throw new Error('Something went wrong!');\r\n            }\r\n\r\n            removeBookId(bookId);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Jumbotron fluid className='text-light bg-dark'>\r\n                <Container>\r\n                    <h1>Viewing saved books!</h1>\r\n                </Container>\r\n            </Jumbotron>\r\n            <Container>\r\n                <h2>\r\n                    {user.savedBooks.length\r\n                        ? `Viewing ${user.savedBooks.length} saved ${user.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n                        : 'You have no saved books!'}\r\n                </h2>\r\n                <CardColumns>\r\n                    {user.savedBooks.map((book) => {\r\n                        return (\r\n                            <Card key={book.bookId} border='dark'>\r\n                                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                                <Card.Body>\r\n                                    <Card.Title>{book.title}</Card.Title>\r\n                                    <p className='small'>Authors: {book.authors}</p>\r\n                                    <Card.Text>{book.description}</Card.Text>\r\n                                    <a href={book.link} target=\"_blank\">View on Google Books</a><p></p>\r\n                                    <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                                        Delete this Book!\r\n                  </Button>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        );\r\n                    })}\r\n                </CardColumns>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SavedBooks;","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","  import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}